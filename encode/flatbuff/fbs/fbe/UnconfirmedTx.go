// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UnconfirmedTx struct {
	_tab flatbuffers.Table
}

func GetRootAsUnconfirmedTx(buf []byte, offset flatbuffers.UOffsetT) *UnconfirmedTx {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UnconfirmedTx{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsUnconfirmedTx(buf []byte, offset flatbuffers.UOffsetT) *UnconfirmedTx {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UnconfirmedTx{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *UnconfirmedTx) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UnconfirmedTx) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UnconfirmedTx) TxHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UnconfirmedTx) Fee() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnconfirmedTx) MutateFee(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *UnconfirmedTx) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UnconfirmedTx) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func UnconfirmedTxStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UnconfirmedTxAddTxHash(builder *flatbuffers.Builder, txHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(txHash), 0)
}
func UnconfirmedTxAddFee(builder *flatbuffers.Builder, fee int64) {
	builder.PrependInt64Slot(1, fee, 0)
}
func UnconfirmedTxAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(2, size, 0)
}
func UnconfirmedTxEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
