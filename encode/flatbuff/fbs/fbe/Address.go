// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Address struct {
	_tab flatbuffers.Table
}

func GetRootAsAddress(buf []byte, offset flatbuffers.UOffsetT) *Address {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Address{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddress(buf []byte, offset flatbuffers.UOffsetT) *Address {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Address{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Address) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Address) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Address) Received() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateReceived(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Address) Sent() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateSent(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Address) TxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateTxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Address) UnconfirmedTxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateUnconfirmedTxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Address) UnconfirmedReceived() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateUnconfirmedReceived(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Address) UnconfirmedSent() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateUnconfirmedSent(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Address) UnspentTxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateUnspentTxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *Address) UnspentTxMaxIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateUnspentTxMaxIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *Address) LastConfirmedTxIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Address) MutateLastConfirmedTxIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func AddressStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func AddressAddReceived(builder *flatbuffers.Builder, received int64) {
	builder.PrependInt64Slot(0, received, 0)
}
func AddressAddSent(builder *flatbuffers.Builder, sent int64) {
	builder.PrependInt64Slot(1, sent, 0)
}
func AddressAddTxCount(builder *flatbuffers.Builder, txCount int32) {
	builder.PrependInt32Slot(2, txCount, 0)
}
func AddressAddUnconfirmedTxCount(builder *flatbuffers.Builder, unconfirmedTxCount int32) {
	builder.PrependInt32Slot(3, unconfirmedTxCount, 0)
}
func AddressAddUnconfirmedReceived(builder *flatbuffers.Builder, unconfirmedReceived int64) {
	builder.PrependInt64Slot(4, unconfirmedReceived, 0)
}
func AddressAddUnconfirmedSent(builder *flatbuffers.Builder, unconfirmedSent int64) {
	builder.PrependInt64Slot(5, unconfirmedSent, 0)
}
func AddressAddUnspentTxCount(builder *flatbuffers.Builder, unspentTxCount int32) {
	builder.PrependInt32Slot(6, unspentTxCount, 0)
}
func AddressAddUnspentTxMaxIndex(builder *flatbuffers.Builder, unspentTxMaxIndex int32) {
	builder.PrependInt32Slot(7, unspentTxMaxIndex, 0)
}
func AddressAddLastConfirmedTxIndex(builder *flatbuffers.Builder, lastConfirmedTxIndex int32) {
	builder.PrependInt32Slot(8, lastConfirmedTxIndex, 0)
}
func AddressEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
