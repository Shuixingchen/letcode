// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TxInput struct {
	_tab flatbuffers.Table
}

func GetRootAsTxInput(buf []byte, offset flatbuffers.UOffsetT) *TxInput {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TxInput{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTxInput(buf []byte, offset flatbuffers.UOffsetT) *TxInput {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TxInput{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TxInput) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TxInput) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TxInput) Sequence() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxInput) MutateSequence(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *TxInput) ScriptAsm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TxInput) ScriptHex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TxInput) Witness(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TxInput) WitnessLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TxInput) PrevTxHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TxInput) PrevPosition() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxInput) MutatePrevPosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *TxInput) PrevValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxInput) MutatePrevValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *TxInput) PrevAddresses(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TxInput) PrevAddressesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TxInput) PrevType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxInput) MutatePrevType(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func TxInputStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func TxInputAddSequence(builder *flatbuffers.Builder, sequence uint32) {
	builder.PrependUint32Slot(0, sequence, 0)
}
func TxInputAddScriptAsm(builder *flatbuffers.Builder, scriptAsm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(scriptAsm), 0)
}
func TxInputAddScriptHex(builder *flatbuffers.Builder, scriptHex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(scriptHex), 0)
}
func TxInputAddWitness(builder *flatbuffers.Builder, witness flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(witness), 0)
}
func TxInputStartWitnessVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxInputAddPrevTxHash(builder *flatbuffers.Builder, prevTxHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(prevTxHash), 0)
}
func TxInputAddPrevPosition(builder *flatbuffers.Builder, prevPosition int32) {
	builder.PrependInt32Slot(5, prevPosition, 0)
}
func TxInputAddPrevValue(builder *flatbuffers.Builder, prevValue int64) {
	builder.PrependInt64Slot(6, prevValue, 0)
}
func TxInputAddPrevAddresses(builder *flatbuffers.Builder, prevAddresses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(prevAddresses), 0)
}
func TxInputStartPrevAddressesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxInputAddPrevType(builder *flatbuffers.Builder, prevType int32) {
	builder.PrependInt32Slot(8, prevType, 0)
}
func TxInputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
