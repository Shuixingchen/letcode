// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddressUnspent struct {
	_tab flatbuffers.Table
}

func GetRootAsAddressUnspent(buf []byte, offset flatbuffers.UOffsetT) *AddressUnspent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddressUnspent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddressUnspent(buf []byte, offset flatbuffers.UOffsetT) *AddressUnspent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddressUnspent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddressUnspent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddressUnspent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddressUnspent) Value() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressUnspent) MutateValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AddressUnspent) TxHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AddressUnspent) Position() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressUnspent) MutatePosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *AddressUnspent) Position2() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressUnspent) MutatePosition2(n int16) bool {
	return rcv._tab.MutateInt16Slot(10, n)
}

func AddressUnspentStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AddressUnspentAddValue(builder *flatbuffers.Builder, value int64) {
	builder.PrependInt64Slot(0, value, 0)
}
func AddressUnspentAddTxHash(builder *flatbuffers.Builder, txHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(txHash), 0)
}
func AddressUnspentAddPosition(builder *flatbuffers.Builder, position int32) {
	builder.PrependInt32Slot(2, position, 0)
}
func AddressUnspentAddPosition2(builder *flatbuffers.Builder, position2 int16) {
	builder.PrependInt16Slot(3, position2, 0)
}
func AddressUnspentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
