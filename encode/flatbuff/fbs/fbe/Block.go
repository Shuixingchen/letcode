// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Block struct {
	_tab flatbuffers.Table
}

func GetRootAsBlock(buf []byte, offset flatbuffers.UOffsetT) *Block {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Block{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBlock(buf []byte, offset flatbuffers.UOffsetT) *Block {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Block{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Block) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Block) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Block) Height() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Block) Version() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateVersion(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Block) MrklRoot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Block) Timestamp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateTimestamp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Block) Bits() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateBits(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Block) Nonce() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateNonce(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *Block) PrevBlockHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Block) NextBlockHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Block) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *Block) PoolDifficulty() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutatePoolDifficulty(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func (rcv *Block) Difficulty() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Block) MutateDifficulty(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

func (rcv *Block) TxCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateTxCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func (rcv *Block) RewardBlock() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateRewardBlock(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *Block) RewardFees() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateRewardFees(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *Block) CreatedAt() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateCreatedAt(n uint32) bool {
	return rcv._tab.MutateUint32Slot(32, n)
}

func (rcv *Block) IsOrphan() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Block) MutateIsOrphan(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

func (rcv *Block) CurrMaxTimestamp() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateCurrMaxTimestamp(n uint32) bool {
	return rcv._tab.MutateUint32Slot(36, n)
}

func (rcv *Block) IsSwBlock() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Block) MutateIsSwBlock(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

func (rcv *Block) StrippedSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateStrippedSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func (rcv *Block) Weight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Block) MutateWeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func BlockStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func BlockAddHeight(builder *flatbuffers.Builder, height int32) {
	builder.PrependInt32Slot(0, height, 0)
}
func BlockAddVersion(builder *flatbuffers.Builder, version int32) {
	builder.PrependInt32Slot(1, version, 0)
}
func BlockAddMrklRoot(builder *flatbuffers.Builder, mrklRoot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mrklRoot), 0)
}
func BlockAddTimestamp(builder *flatbuffers.Builder, timestamp uint32) {
	builder.PrependUint32Slot(3, timestamp, 0)
}
func BlockAddBits(builder *flatbuffers.Builder, bits uint32) {
	builder.PrependUint32Slot(4, bits, 0)
}
func BlockAddNonce(builder *flatbuffers.Builder, nonce uint32) {
	builder.PrependUint32Slot(5, nonce, 0)
}
func BlockAddPrevBlockHash(builder *flatbuffers.Builder, prevBlockHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(prevBlockHash), 0)
}
func BlockAddNextBlockHash(builder *flatbuffers.Builder, nextBlockHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(nextBlockHash), 0)
}
func BlockAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(8, size, 0)
}
func BlockAddPoolDifficulty(builder *flatbuffers.Builder, poolDifficulty int64) {
	builder.PrependInt64Slot(9, poolDifficulty, 0)
}
func BlockAddDifficulty(builder *flatbuffers.Builder, difficulty float64) {
	builder.PrependFloat64Slot(10, difficulty, 0.0)
}
func BlockAddTxCount(builder *flatbuffers.Builder, txCount uint32) {
	builder.PrependUint32Slot(11, txCount, 0)
}
func BlockAddRewardBlock(builder *flatbuffers.Builder, rewardBlock int64) {
	builder.PrependInt64Slot(12, rewardBlock, 0)
}
func BlockAddRewardFees(builder *flatbuffers.Builder, rewardFees int64) {
	builder.PrependInt64Slot(13, rewardFees, 0)
}
func BlockAddCreatedAt(builder *flatbuffers.Builder, createdAt uint32) {
	builder.PrependUint32Slot(14, createdAt, 0)
}
func BlockAddIsOrphan(builder *flatbuffers.Builder, isOrphan bool) {
	builder.PrependBoolSlot(15, isOrphan, false)
}
func BlockAddCurrMaxTimestamp(builder *flatbuffers.Builder, currMaxTimestamp uint32) {
	builder.PrependUint32Slot(16, currMaxTimestamp, 0)
}
func BlockAddIsSwBlock(builder *flatbuffers.Builder, isSwBlock bool) {
	builder.PrependBoolSlot(17, isSwBlock, false)
}
func BlockAddStrippedSize(builder *flatbuffers.Builder, strippedSize int32) {
	builder.PrependInt32Slot(18, strippedSize, 0)
}
func BlockAddWeight(builder *flatbuffers.Builder, weight int32) {
	builder.PrependInt32Slot(19, weight, 0)
}
func BlockEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
