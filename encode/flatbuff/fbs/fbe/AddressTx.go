// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddressTx struct {
	_tab flatbuffers.Table
}

func GetRootAsAddressTx(buf []byte, offset flatbuffers.UOffsetT) *AddressTx {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddressTx{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddressTx(buf []byte, offset flatbuffers.UOffsetT) *AddressTx {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddressTx{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddressTx) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddressTx) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddressTx) BalanceDiff() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressTx) MutateBalanceDiff(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *AddressTx) TxHash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AddressTx) TxHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressTx) MutateTxHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *AddressTx) TxBlockTime() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressTx) MutateTxBlockTime(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func AddressTxStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AddressTxAddBalanceDiff(builder *flatbuffers.Builder, balanceDiff int64) {
	builder.PrependInt64Slot(0, balanceDiff, 0)
}
func AddressTxAddTxHash(builder *flatbuffers.Builder, txHash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(txHash), 0)
}
func AddressTxAddTxHeight(builder *flatbuffers.Builder, txHeight int32) {
	builder.PrependInt32Slot(2, txHeight, 0)
}
func AddressTxAddTxBlockTime(builder *flatbuffers.Builder, txBlockTime uint32) {
	builder.PrependUint32Slot(3, txBlockTime, 0)
}
func AddressTxEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
