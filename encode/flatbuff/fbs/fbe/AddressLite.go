// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbe

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AddressLite struct {
	_tab flatbuffers.Table
}

func GetRootAsAddressLite(buf []byte, offset flatbuffers.UOffsetT) *AddressLite {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AddressLite{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAddressLite(buf []byte, offset flatbuffers.UOffsetT) *AddressLite {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AddressLite{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AddressLite) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AddressLite) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AddressLite) TxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressLite) MutateTxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *AddressLite) Received() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressLite) MutateReceived(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *AddressLite) Sent() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressLite) MutateSent(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *AddressLite) BeginTxYmd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressLite) MutateBeginTxYmd(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *AddressLite) EndTxYmd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AddressLite) MutateEndTxYmd(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func AddressLiteStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AddressLiteAddTxCount(builder *flatbuffers.Builder, txCount int32) {
	builder.PrependInt32Slot(0, txCount, 0)
}
func AddressLiteAddReceived(builder *flatbuffers.Builder, received int64) {
	builder.PrependInt64Slot(1, received, 0)
}
func AddressLiteAddSent(builder *flatbuffers.Builder, sent int64) {
	builder.PrependInt64Slot(2, sent, 0)
}
func AddressLiteAddBeginTxYmd(builder *flatbuffers.Builder, beginTxYmd int32) {
	builder.PrependInt32Slot(3, beginTxYmd, 0)
}
func AddressLiteAddEndTxYmd(builder *flatbuffers.Builder, endTxYmd int32) {
	builder.PrependInt32Slot(4, endTxYmd, 0)
}
func AddressLiteEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
