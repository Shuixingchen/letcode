// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spider.proto

package spider

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 发送请求
type SendAddress struct {
	// 发送的参数字段
	// 参数类型 参数名 标识号(不可重复)
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Method               string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendAddress) Reset()         { *m = SendAddress{} }
func (m *SendAddress) String() string { return proto.CompactTextString(m) }
func (*SendAddress) ProtoMessage()    {}
func (*SendAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{0}
}

func (m *SendAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendAddress.Unmarshal(m, b)
}
func (m *SendAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendAddress.Marshal(b, m, deterministic)
}
func (m *SendAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendAddress.Merge(m, src)
}
func (m *SendAddress) XXX_Size() int {
	return xxx_messageInfo_SendAddress.Size(m)
}
func (m *SendAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_SendAddress.DiscardUnknown(m)
}

var xxx_messageInfo_SendAddress proto.InternalMessageInfo

func (m *SendAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SendAddress) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// 返回响应
type GetResponse struct {
	// 接收的参数字段
	// 参数类型 参数名 标识号
	HttpCode             int32    `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	Response             string   `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{1}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetHttpCode() int32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*SendAddress)(nil), "spider.SendAddress")
	proto.RegisterType((*GetResponse)(nil), "spider.GetResponse")
}

func init() { proto.RegisterFile("spider.proto", fileDescriptor_cb38e26738aa8833) }

var fileDescriptor_cb38e26738aa8833 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0xc8, 0x4c,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xec, 0xb9, 0xb8,
	0x83, 0x53, 0xf3, 0x52, 0x1c, 0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x85, 0x24, 0xb8, 0xd8, 0x13,
	0x21, 0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x48, 0x8c, 0x8b, 0x2d, 0x37,
	0xb5, 0x24, 0x23, 0x3f, 0x45, 0x82, 0x09, 0x2c, 0x01, 0xe5, 0x29, 0xb9, 0x72, 0x71, 0xbb, 0xa7,
	0x96, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0x64, 0x94, 0x94,
	0x14, 0x38, 0xe7, 0xa7, 0xa4, 0x82, 0x4d, 0x60, 0x0d, 0x82, 0xf3, 0x41, 0x72, 0x45, 0x50, 0x75,
	0x50, 0x43, 0xe0, 0x7c, 0x23, 0x2f, 0x2e, 0x0e, 0xf7, 0xfc, 0x60, 0xb0, 0x9b, 0x84, 0xec, 0xb8,
	0x84, 0xdc, 0x53, 0x4b, 0xa0, 0x4e, 0x82, 0x9b, 0x2c, 0xac, 0x07, 0xf5, 0x00, 0x92, 0x7b, 0xa5,
	0xe0, 0x82, 0x48, 0x6e, 0x48, 0x62, 0x03, 0x7b, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb7,
	0xf2, 0x91, 0xb0, 0xf2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GoSpiderClient is the client API for GoSpider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoSpiderClient interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	GetAddressResponse(ctx context.Context, in *SendAddress, opts ...grpc.CallOption) (*GetResponse, error)
}

type goSpiderClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSpiderClient(cc grpc.ClientConnInterface) GoSpiderClient {
	return &goSpiderClient{cc}
}

func (c *goSpiderClient) GetAddressResponse(ctx context.Context, in *SendAddress, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/spider.GoSpider/GetAddressResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSpiderServer is the server API for GoSpider service.
type GoSpiderServer interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	GetAddressResponse(context.Context, *SendAddress) (*GetResponse, error)
}

// UnimplementedGoSpiderServer can be embedded to have forward compatible implementations.
type UnimplementedGoSpiderServer struct {
}

func (*UnimplementedGoSpiderServer) GetAddressResponse(ctx context.Context, req *SendAddress) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressResponse not implemented")
}

func RegisterGoSpiderServer(s *grpc.Server, srv GoSpiderServer) {
	s.RegisterService(&_GoSpider_serviceDesc, srv)
}

func _GoSpider_GetAddressResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSpiderServer).GetAddressResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.GoSpider/GetAddressResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSpiderServer).GetAddressResponse(ctx, req.(*SendAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoSpider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spider.GoSpider",
	HandlerType: (*GoSpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddressResponse",
			Handler:    _GoSpider_GetAddressResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spider.proto",
}
